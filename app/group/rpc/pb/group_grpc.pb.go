// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: group.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GroupClient_AddFriend_FullMethodName            = "/group.GroupClient/AddFriend"
	GroupClient_HandleFriend_FullMethodName         = "/group.GroupClient/HandleFriend"
	GroupClient_GroupUserList_FullMethodName        = "/group.GroupClient/GroupUserList"
	GroupClient_UserGroupList_FullMethodName        = "/group.GroupClient/UserGroupList"
	GroupClient_MessageGroupInfoList_FullMethodName = "/group.GroupClient/MessageGroupInfoList"
)

// GroupClientClient is the client API for GroupClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupClientClient interface {
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error)
	HandleFriend(ctx context.Context, in *HandleFriendRequest, opts ...grpc.CallOption) (*HandleFriendResponse, error)
	GroupUserList(ctx context.Context, in *GroupUserListRequest, opts ...grpc.CallOption) (*GroupUserListResponse, error)
	UserGroupList(ctx context.Context, in *UserGroupListRequest, opts ...grpc.CallOption) (*UserGroupListResponse, error)
	MessageGroupInfoList(ctx context.Context, in *MessageGroupInfoListRequest, opts ...grpc.CallOption) (*MessageGroupInfoListResponse, error)
}

type groupClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupClientClient(cc grpc.ClientConnInterface) GroupClientClient {
	return &groupClientClient{cc}
}

func (c *groupClientClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFriendResponse)
	err := c.cc.Invoke(ctx, GroupClient_AddFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClientClient) HandleFriend(ctx context.Context, in *HandleFriendRequest, opts ...grpc.CallOption) (*HandleFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleFriendResponse)
	err := c.cc.Invoke(ctx, GroupClient_HandleFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClientClient) GroupUserList(ctx context.Context, in *GroupUserListRequest, opts ...grpc.CallOption) (*GroupUserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupUserListResponse)
	err := c.cc.Invoke(ctx, GroupClient_GroupUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClientClient) UserGroupList(ctx context.Context, in *UserGroupListRequest, opts ...grpc.CallOption) (*UserGroupListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGroupListResponse)
	err := c.cc.Invoke(ctx, GroupClient_UserGroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClientClient) MessageGroupInfoList(ctx context.Context, in *MessageGroupInfoListRequest, opts ...grpc.CallOption) (*MessageGroupInfoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageGroupInfoListResponse)
	err := c.cc.Invoke(ctx, GroupClient_MessageGroupInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupClientServer is the server API for GroupClient service.
// All implementations must embed UnimplementedGroupClientServer
// for forward compatibility.
type GroupClientServer interface {
	AddFriend(context.Context, *AddFriendRequest) (*AddFriendResponse, error)
	HandleFriend(context.Context, *HandleFriendRequest) (*HandleFriendResponse, error)
	GroupUserList(context.Context, *GroupUserListRequest) (*GroupUserListResponse, error)
	UserGroupList(context.Context, *UserGroupListRequest) (*UserGroupListResponse, error)
	MessageGroupInfoList(context.Context, *MessageGroupInfoListRequest) (*MessageGroupInfoListResponse, error)
	mustEmbedUnimplementedGroupClientServer()
}

// UnimplementedGroupClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupClientServer struct{}

func (UnimplementedGroupClientServer) AddFriend(context.Context, *AddFriendRequest) (*AddFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedGroupClientServer) HandleFriend(context.Context, *HandleFriendRequest) (*HandleFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFriend not implemented")
}
func (UnimplementedGroupClientServer) GroupUserList(context.Context, *GroupUserListRequest) (*GroupUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUserList not implemented")
}
func (UnimplementedGroupClientServer) UserGroupList(context.Context, *UserGroupListRequest) (*UserGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGroupList not implemented")
}
func (UnimplementedGroupClientServer) MessageGroupInfoList(context.Context, *MessageGroupInfoListRequest) (*MessageGroupInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGroupInfoList not implemented")
}
func (UnimplementedGroupClientServer) mustEmbedUnimplementedGroupClientServer() {}
func (UnimplementedGroupClientServer) testEmbeddedByValue()                     {}

// UnsafeGroupClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupClientServer will
// result in compilation errors.
type UnsafeGroupClientServer interface {
	mustEmbedUnimplementedGroupClientServer()
}

func RegisterGroupClientServer(s grpc.ServiceRegistrar, srv GroupClientServer) {
	// If the following call pancis, it indicates UnimplementedGroupClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupClient_ServiceDesc, srv)
}

func _GroupClient_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupClientServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupClient_AddFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupClientServer).AddFriend(ctx, req.(*AddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupClient_HandleFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupClientServer).HandleFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupClient_HandleFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupClientServer).HandleFriend(ctx, req.(*HandleFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupClient_GroupUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupClientServer).GroupUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupClient_GroupUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupClientServer).GroupUserList(ctx, req.(*GroupUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupClient_UserGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupClientServer).UserGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupClient_UserGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupClientServer).UserGroupList(ctx, req.(*UserGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupClient_MessageGroupInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageGroupInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupClientServer).MessageGroupInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupClient_MessageGroupInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupClientServer).MessageGroupInfoList(ctx, req.(*MessageGroupInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupClient_ServiceDesc is the grpc.ServiceDesc for GroupClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "group.GroupClient",
	HandlerType: (*GroupClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriend",
			Handler:    _GroupClient_AddFriend_Handler,
		},
		{
			MethodName: "HandleFriend",
			Handler:    _GroupClient_HandleFriend_Handler,
		},
		{
			MethodName: "GroupUserList",
			Handler:    _GroupClient_GroupUserList_Handler,
		},
		{
			MethodName: "UserGroupList",
			Handler:    _GroupClient_UserGroupList_Handler,
		},
		{
			MethodName: "MessageGroupInfoList",
			Handler:    _GroupClient_MessageGroupInfoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.proto",
}
